# Split a set of photos into TP, FP, TN,FN
# Run infer_image_classifier.py first to get the inference results.

import argparse
import glob
import pickle

import os

FLAGS = None


def main():
    if os.path.exists(FLAGS.split_dir):
        raise ValueError('%s already exists. Quitting.' % FLAGS.split_dir)

    print "Creating directory " + FLAGS.split_dir
    os.mkdir(FLAGS.split_dir)
    for split_name in ['tp', 'fp', 'tn', 'fn']:
        print "Creating directory " + split_name
        os.mkdir(os.path.join(FLAGS.split_dir, split_name))

    file_list = glob.glob(os.path.join(FLAGS.photos_dir, '*/*'))
    print "Found %d files in total." % len(file_list)

    print "Loading inference results ..."
    results = pickle.load(open(FLAGS.inference_result_file, 'rb'))
    print "Loaded %d inference results" % len(results)
    assert len(file_list) == len(results)
    results = dict(results)

    for path in file_list:
        image_id = os.path.splitext(os.path.basename(path))[0]
        if 'positive' in path and results[image_id] == 1:
            tag = 'tp'
        elif 'positive' in path and results[image_id] == 0:
            tag = 'fn'
        elif 'negative' in path and results[image_id] == 1:
            tag = 'fp'
        elif 'negative' in path and results[image_id] == 0:
            tag = 'tn'
        else:
            raise ValueError('Something is wrong with ' + path)

        src = path
        dest = os.path.join(FLAGS.split_dir, tag, os.path.basename(path))

        os.symlink(src, dest)
        print "Linking %s -> %s" % (src, dest)

    print "Done"


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Split a set of photos into TP, FP, TN,FN.'
                                                 'Run infer_image_classifier.py first to get the inference results.')
    parser.add_argument('--inference_result_file', dest='inference_result_file',
                        help='The inference result file (pickle) generated by infer_image_classifier.py.')
    parser.add_argument('--photos_dir', dest='photos_dir',
                        help='The photos directory. Expect there are `positive` and `negative` directories under it.')
    parser.add_argument('--split_dir', dest='split_dir',
                        help='The parent directory to store the split. Will be created. Should not exist.')

    FLAGS, unparsed = parser.parse_known_args()
    main()
